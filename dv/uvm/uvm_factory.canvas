{
	"nodes":[
		{"id":"8392a8c6f5aaad96","type":"group","isStartNode":false,"x":-1080,"y":-2280,"width":1280,"height":1920,"label":"sv/src/base/uvm_registry.svh"},
		{"id":"88224accbac49920","type":"group","x":-2244,"y":-1640,"width":1045,"height":1520,"label":"sv/src/macros/uvm_object_defines.svh"},
		{"id":"7326f8def4bd938e","type":"text","text":"sv/src/macros/uvm_object_defines.svh\n```verilog\n`define uvm_object_utils(T) \\\n  `uvm_object_utils_begin(T) \\\n  `uvm_object_utils_end\n\n`define uvm_object_utils_begin(T) \\\n   `m_uvm_object_registry_internal(T,T)  \\\n   `m_uvm_object_create_func(T) \\\n   `m_uvm_get_type_name_func(T) \\\n   `uvm_field_utils_begin(T)\n\n`define m_uvm_object_registry_internal(T,S) \\\n   typedef uvm_object_registry#(T,`\"S`\") type_id; \\\n   static function type_id get_type(); \\\n     return type_id::get(); \\\n   endfunction \\\n   virtual function uvm_object_wrapper get_object_type(); \\\n     return type_id::get(); \\\n   endfunction\n```","isStartNode":false,"x":-3600,"y":-3680,"width":840,"height":780,"color":"6"},
		{"id":"b1a66a242d1f9f82","type":"text","text":"\n```verilog\n`define m_uvm_object_create_func(T) \\\n   function uvm_object create (string name=\"\"); \\\n     T tmp; \\\n`ifdef UVM_OBJECT_DO_NOT_NEED_CONSTRUCTOR \\\n     tmp = new(); \\\n     if (name!=\"\") \\\n       tmp.set_name(name); \\\n`else \\\n     if (name==\"\") tmp = new(); \\\n     else tmp = new(name); \\\n`endif \\\n     return tmp; \\\n   endfunction\n\n`define m_uvm_get_type_name_func(T) \\\n   const static string type_name = `\"T`\"; \\\n   virtual function string get_type_name (); \\\n     return type_name; \\\n   endfunction\n```","x":-2080,"y":-880,"width":840,"height":720,"color":"6"},
		{"id":"51e1ef73d948f9b3","type":"text","text":"sv/src/base/uvm_registry.svh\n```verilog\nclass uvm_object_registry #(type T=uvm_object, string Tname=\"<unknown>\")\n                                        extends uvm_object_wrapper;\n  typedef uvm_object_registry #(T,Tname) this_type;\n\n  local static this_type me = get();\n\n  // Function: get\n  //\n  // Returns the singleton instance of this type. Type-based factory operation\n  // depends on there being a single proxy instance for each registered type. \n\n  //me為null，則instantiate me，透過factory.register註冊\n  static function this_type get();\n    if (me == null) begin\n      uvm_coreservice_t cs = uvm_coreservice_t::get(); // 3                                                  \n      uvm_factory factory=cs.get_factory(); // 3\n\t\t\t//me的type是uvm_object_registry #(T,Tname)\n\t\t\t//且在typedef uvm_object_registry#(T,`\"S`\") type_id就已經執行\n\t\t\t//且因為是static的緣故所以不會interation執行\n      me = new;\n      factory.register(me); // 4\n    end\n    return me;\n  endfunction\n```\n","x":-2680,"y":-3880,"width":1200,"height":980},
		{"id":"2c0029b3c6af0509","type":"file","file":"testtest.md","x":-3009,"y":-2820,"width":1529,"height":500}
	],
	"edges":[
		{"id":"5999db188bdb5d3e","edgePathRoute":"square","fromNode":"7326f8def4bd938e","fromSide":"right","toNode":"51e1ef73d948f9b3","toSide":"left"}
	],
	"metadata":{}
}