{
	"nodes":[
		{"id":"7326f8def4bd938e","type":"text","text":"sv/src/macros/uvm_object_defines.svh\n```verilog\n`define uvm_object_utils(T) \\\n  `uvm_object_utils_begin(T) \\\n  `uvm_object_utils_end\n\n`define uvm_object_utils_begin(T) \\\n   `m_uvm_object_registry_internal(T,T)  \\\n   `m_uvm_object_create_func(T) \\\n   `m_uvm_get_type_name_func(T) \\\n   `uvm_field_utils_begin(T)\n\n`define m_uvm_object_registry_internal(T,S) \\\n   typedef uvm_object_registry#(T,`\"S`\") type_id; \\\n   static function type_id get_type(); \\\n     return type_id::get(); \\\n   endfunction \\\n   virtual function uvm_object_wrapper get_object_type(); \\\n     return type_id::get(); \\\n   endfunction\n```","isStartNode":false,"x":-3600,"y":-3680,"width":840,"height":780,"color":"6"},
		{"id":"51e1ef73d948f9b3","type":"text","text":"sv/src/base/uvm_registry.svh\n```verilog\nclass uvm_object_registry #(type T=uvm_object, string Tname=\"<unknown>\")\n                                        extends uvm_object_wrapper;\n  typedef uvm_object_registry #(T,Tname) this_type;\n\n  local static this_type me = get();\n\n  // Function: get\n  //\n  // Returns the singleton instance of this type. Type-based factory operation\n  // depends on there being a single proxy instance for each registered type. \n\n  //me為null，則instantiate me，透過factory.register註冊\n  static function this_type get();\n    if (me == null) begin\n      uvm_coreservice_t cs = uvm_coreservice_t::get(); // 3                                                  \n      uvm_factory factory=cs.get_factory(); // 3\n\t\t\t//me的type是uvm_object_registry #(T,Tname)\n\t\t\t//且在typedef uvm_object_registry#(T,`\"S`\") type_id就已經執行\n\t\t\t//且因為是static的緣故所以不會interation執行\n      me = new;\n      factory.register(me); // 4\n    end\n    return me;\n  endfunction\n```\n","x":-2680,"y":-3880,"width":1360,"height":980,"color":"6"},
		{"id":"13dc4986f37bc2ce","type":"text","text":"1. 定義了一個類(component類或者object類)\n2. 調用uvm_object_registry\n\t1. 定義了type_id這個變量，每個參數化的類都是不同的類，因此，每一個component類都有與之對應的一個uvm_object_registry類，注意uvm_object_registry內部都是使用static去宣告(靜態成員 (static member))，靜態成員函式是不屬於任何一個實體 (instance)，即不需要任何實體就可以呼叫該類別的成員. \n\t2. type_id本質就是在X中定義的uvm_component_registry #(X, \"X\")這個類,所以調用X::type_id::create(\"x\", this)就是調用了uvm_component_register #(X, \"X\")中的create方法  \n\t\t- ==type_id在被定義的瞬間，即是local static this_type me = get(); 就被執行，且每個類都有自己的static this_type me==\n\t1. uvm_object_registry裡面有個me的靜態成員變量，這個靜態成員變量在elaborate結束的時候就被創建出來\n\t2. 在創建這個me的時候調用get()的function，在這個function裡面調用factory的register，將對應類的uvm_object_registry類註冊到factory裡面。\n","x":-3600,"y":-2880,"width":2280,"height":380,"color":"6"},
		{"id":"b14cf68d7f4ac580","type":"text","text":"[# UVM源码探索之Factory(上篇)](https://zhouchuanrui.github.io/2016/08/27/note_asic/uvm_factory/)","x":-3600,"y":-3800,"width":520,"height":80,"color":"6"},
		{"id":"b1a66a242d1f9f82","type":"text","text":"sv/src/macros/uvm_object_defines.svh\n```verilog\n`define m_uvm_object_create_func(T) \\\n   function uvm_object create (string name=\"\"); \\\n     T tmp; \\\n`ifdef UVM_OBJECT_DO_NOT_NEED_CONSTRUCTOR \\\n     tmp = new(); \\\n     if (name!=\"\") \\\n       tmp.set_name(name); \\\n`else \\\n     if (name==\"\") tmp = new(); \\\n     else tmp = new(name); \\\n`endif \\\n     return tmp; \\\n   endfunction\n\n`define m_uvm_get_type_name_func(T) \\\n   const static string type_name = `\"T`\"; \\\n   virtual function string get_type_name (); \\\n     return type_name; \\\n   endfunction\n```","x":-3600,"y":-2480,"width":840,"height":720,"color":"6"},
		{"id":"b6ce1a9c47ed681c","x":-2622,"y":-2411,"width":1382,"height":451,"type":"text","text":"\n\n|                 | C                        | Verilog                  |\n| --------------- | ------------------------ | ------------------------ |\n| static member   | ==不可==在class內初始化         | ==可==在class內初始化          |\n| static function | 靜態成員函式裡存取的所有變數都要是 static | 靜態成員函式裡存取的所有變數都要是 static |\n\n\n\n\n"}
	],
	"edges":[
		{"id":"5999db188bdb5d3e","edgePathRoute":"square","fromNode":"7326f8def4bd938e","fromSide":"right","toNode":"51e1ef73d948f9b3","toSide":"left"}
	],
	"metadata":{}
}