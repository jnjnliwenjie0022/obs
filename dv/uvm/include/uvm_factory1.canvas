{
	"nodes":[
		{"id":"7326f8def4bd938e","type":"text","text":"sv/src/macros/uvm_object_defines.svh\n```verilog\n`define uvm_object_utils(T) \\\n  `uvm_object_utils_begin(T) \\\n  `uvm_object_utils_end\n\n`define uvm_object_utils_begin(T) \\\n   `m_uvm_object_registry_internal(T,T)  \\\n   `m_uvm_object_create_func(T) \\\n   `m_uvm_get_type_name_func(T) \\\n   `uvm_field_utils_begin(T)\n\n`define m_uvm_object_registry_internal(T,S) \\\n   typedef uvm_object_registry#(T,`\"S`\") type_id; \\\n   static function type_id get_type(); \\\n     return type_id::get(); \\\n   endfunction \\\n   virtual function uvm_object_wrapper get_object_type(); \\\n     return type_id::get(); \\\n   endfunction\n```","isStartNode":false,"x":-3600,"y":-3680,"width":580,"height":480,"color":"6"},
		{"id":"b14cf68d7f4ac580","type":"text","text":"[# UVM源码探索之Factory(上篇)](https://zhouchuanrui.github.io/2016/08/27/note_asic/uvm_factory/)","x":-3600,"y":-3800,"width":520,"height":45,"color":"6"},
		{"id":"51e1ef73d948f9b3","type":"text","text":"sv/src/base/uvm_registry.svh\n```verilog\nclass uvm_object_registry #(type T=uvm_object, string Tname=\"<unknown>\")\n                                        extends uvm_object_wrapper;\n  typedef uvm_object_registry #(T,Tname) this_type;\n\n  local static this_type me = get();\n\n  // Function: get\n  //\n  // Returns the singleton instance of this type. Type-based factory operation\n  // depends on there being a single proxy instance for each registered type. \n\n  //me為null，則instantiate me，透過factory.register註冊\n  static function this_type get();\n    if (me == null) begin\n      uvm_coreservice_t cs = uvm_coreservice_t::get(); // 3                                                  \n      uvm_factory factory=cs.get_factory(); // 3\n\t\t\t//me的type是uvm_object_registry #(T,Tname)\n\t\t\t//且在typedef uvm_object_registry#(T,`\"S`\") type_id就已經執行\n\t\t\t//且因為是static的緣故所以不會interation執行\n      me = new;\n      factory.register(me); // 4\n    end\n    return me;\n  endfunction\n```\n","x":-2960,"y":-3820,"width":800,"height":620,"color":"6"},
		{"id":"13dc4986f37bc2ce","type":"text","text":"1. 定義了一個類(component類或者object類)\n2. 調用uvm_object_registry\n\t1. 定義了type_id這個變量，每個參數化的類都是不同的類，因此，每一個component類都有與之對應的一個uvm_object_registry類，注意uvm_object_registry內部都是使用static去宣告(靜態成員 (static member))，靜態成員函式是不屬於任何一個實體 (instance)，即不需要任何實體就可以呼叫該類別的成員. \n\t2. type_id本質就是在X中定義的uvm_component_registry #(X, \"X\")這個類,所以調用X::type_id::create(\"x\", this)就是調用了uvm_component_register #(X, \"X\")中的create方法  \n\t\t- ==type_id在被定義的瞬間，即是local static this_type me = get(); 就被執行，且每個類都有自己的static this_type me==\n\t1. uvm_object_registry裡面有個me的靜態成員變量，這個靜態成員變量在elaborate結束的時候就被創建出來\n\t2. 在創建這個me的時候調用get()的function，在這個function裡面調用factory的register，將對應類的uvm_object_registry類註冊到factory裡面。\n","x":-3600,"y":-3160,"width":1440,"height":260,"color":"6"},
		{"id":"b6ce1a9c47ed681c","type":"text","text":"[# C/C++ static 的 5 種用法](https://shengyu7697.github.io/cpp-static/)  \n[systemverilog static varialbes & functions](https://www.chipverify.com/systemverilog/systemverilog-static-variables-functions)\n\n\n|                 | C                        | Verilog                  |\n| --------------- | ------------------------ | ------------------------ |\n| static member   | ==不可==在class內初始化         | ==可==在class內初始化          |\n| static function | 靜態成員函式裡存取的所有變數都要是 static | 靜態成員函式裡存取的所有變數都要是 static |\n|                 |                          |                          |\n\n\n\n","x":-3600,"y":-2860,"width":420,"height":321,"color":"6"},
		{"id":"b1a66a242d1f9f82","type":"text","text":"sv/src/macros/uvm_object_defines.svh\n```verilog\n`define m_uvm_object_create_func(T) \\\n   function uvm_object create (string name=\"\"); \\\n     T tmp; \\\n`ifdef UVM_OBJECT_DO_NOT_NEED_CONSTRUCTOR \\\n     tmp = new(); \\\n     if (name!=\"\") \\\n       tmp.set_name(name); \\\n`else \\\n     if (name==\"\") tmp = new(); \\\n     else tmp = new(name); \\\n`endif \\\n     return tmp; \\\n   endfunction\n\n`define m_uvm_get_type_name_func(T) \\\n   const static string type_name = `\"T`\"; \\\n   virtual function string get_type_name (); \\\n     return type_name; \\\n   endfunction\n```","x":-3120,"y":-2860,"width":580,"height":560,"color":"6"},
		{"id":"dfd951861f365047","type":"text","text":"src/base/uvm_factory.svh\n```verilog\nvirtual class uvm_factory;\n  static function uvm_factory get();\n\t  \tuvm_coreservice_t s;\n\t  \ts = uvm_coreservice_t::get();\n\t  \treturn s.get_factory();\n  endfunction\t\n\n\tpure virtual function void register (uvm_object_wrapper obj); // 5\n  pure virtual function\n      void set_inst_override_by_type (uvm_object_wrapper original_type,\n                                      uvm_object_wrapper override_type,\n                                      string full_inst_path);\n  pure virtual function\n      void set_inst_override_by_name (string original_type_name,\n                                      string override_type_name,\n                                      string full_inst_path);\n    ...\n  pure virtual function\n      uvm_object    create_object_by_type    (uvm_object_wrapper requested_type,  \n                                              string parent_inst_path=\"\",\n                                              string name=\"\"); \n  pure virtual function\n      uvm_object    create_object_by_name    (string requested_type_name,  \n                                              string parent_inst_path=\"\",\n                                              string name=\"\"); \n    ...\n  pure  virtual function void print (int all_types=1);\n\n```\n\n```verilog\nclass uvm_default_factory extends uvm_factory;\n\n\tprotected uvm_object_wrapper   m_type_names[string];\n\n\textern virtual function\n      uvm_object    create_object_by_type    (uvm_object_wrapper requested_type,  \n                                              string parent_inst_path=\"\",\n                                              string name=\"\");\n\t\n```\n\n```verilog\nfunction void uvm_default_factory::register (uvm_object_wrapper obj);\n\n  if (obj == null) begin\n    uvm_report_fatal (\"NULLWR\", \"Attempting to register a null object with the factory\", UVM_NONE);\n  end\n  if (obj.get_type_name() != \"\" && obj.get_type_name() != \"<unknown>\") begin\n    if (m_type_names.exists(obj.get_type_name()))\n      uvm_report_warning(\"TPRGED\", {\"Type name '\",obj.get_type_name(),\n        \"' already registered with factory. No string-based lookup \",\n        \"support for multiple types with the same type name.\"}, UVM_NONE);\n    else \n      m_type_names[obj.get_type_name()] = obj;\n  end\n\n  if (m_types.exists(obj)) begin\n    if (obj.get_type_name() != \"\" && obj.get_type_name() != \"<unknown>\")\n      uvm_report_warning(\"TPRGED\", {\"Object type '\",obj.get_type_name(),\n                         \"' already registered with factory. \"}, UVM_NONE);\n  end\n  else begin\n    m_types[obj] = 1;\n    // If a named override happens before the type is registered, need to copy\n    // the override queue.\n    // Note:Registration occurs via static initialization, which occurs ahead of\n    // procedural (e.g. initial) blocks. There should not be any preexisting overrides.\n    if(m_inst_override_name_queues.exists(obj.get_type_name())) begin\n       m_inst_override_queues[obj] = new;\n       m_inst_override_queues[obj].queue = m_inst_override_name_queues[obj.get_type_name()].queue;\n       m_inst_override_name_queues.delete(obj.get_type_name());\n    end\n    if(m_wildcard_inst_overrides.size()) begin\n       if(! m_inst_override_queues.exists(obj)) \n            m_inst_override_queues[obj] = new;\n       foreach (m_wildcard_inst_overrides[i]) begin\n         if(uvm_is_match( m_wildcard_inst_overrides[i].orig_type_name, obj.get_type_name()))\n            m_inst_override_queues[obj].queue.push_back(m_wildcard_inst_overrides[i]);\n       end\n    end\n\n  end\n\nendfunction\n```","x":-2040,"y":-3480,"width":1080,"height":1900,"color":"6"},
		{"id":"0a5bec27d525faf3","type":"text","text":"sv/src/base/uvm_coreservice.svh\n```verilog\n`ifndef UVM_CORESERVICE_TYPE\n`define UVM_CORESERVICE_TYPE uvm_default_coreservice_t\n`endif\n\nvirtual class uvm_coreservice_t;\n\tpure virtual function uvm_factory get_factory();\n\tpure virtual function void set_factory(uvm_factory f);\n\tpure virtual function uvm_report_server get_report_server();\n\tpure virtual function void set_report_server(uvm_report_server server);\n        pure virtual function uvm_tr_database get_default_tr_database();\n        pure virtual function void set_default_tr_database(uvm_tr_database db);\n\tpure virtual function void set_component_visitor(uvm_visitor#(uvm_component) v);\n\tpure virtual function uvm_visitor#(uvm_component) get_component_visitor();\n\tpure virtual function uvm_root get_root();\n\tlocal static `UVM_CORESERVICE_TYPE inst;\n\tstatic function uvm_coreservice_t get();\n\t\tif(inst==null)\n\t\t\tinst=new;\n\t\treturn inst;\n\tendfunction \nendclass\n```\n```verilog\nclass uvm_default_coreservice_t extends uvm_coreservice_t;\n\tlocal uvm_factory factory;\n\n\t// Function: get_factory\n\t//\n\t// Returns the currently enabled uvm factory.\n\t// When no factory has been set before, instantiates a uvm_default_factory\n\tvirtual function uvm_factory get_factory();\n\t\tif(factory==null) begin\n\t\t\tuvm_default_factory f;\n\t\t\tf=new;\n\t\t\tfactory=f;\n\t\tend \n\n\t\treturn factory;\n\tendfunction\n```","x":-2040,"y":-4447,"width":1080,"height":937,"color":"6"},
		{"id":"0a2bd340dbd9c7d2","type":"text","text":"uvm_object_registry #(T,Tname)會override\n1. create_object\n\nuvm_component_registry #(T,Tname)會override\n1. create_component\n\n==UVM的Factory註冊的不是我們定義的類, 而是我們定義的類的object或者component的root物件==","x":-2040,"y":-1520,"width":1080,"height":220,"color":"6"}
	],
	"edges":[
		{"id":"5999db188bdb5d3e","edgePathRoute":"square","fromNode":"7326f8def4bd938e","fromSide":"right","toNode":"51e1ef73d948f9b3","toSide":"left"},
		{"id":"07baac5ef7900dbf","fromNode":"51e1ef73d948f9b3","fromSide":"right","toNode":"0a5bec27d525faf3","toSide":"left"},
		{"id":"e5d3802167f22c0c","fromNode":"51e1ef73d948f9b3","fromSide":"right","toNode":"dfd951861f365047","toSide":"left"}
	],
	"metadata":{}
}